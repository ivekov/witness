package graphql

//go:generate go run github.com/99designs/gqlgen generate

import (
	"context"
	"fmt"
	"log/slog"
	"witness/graphql/generated"
	"witness/models"
	"witness/opensearch"
)

// Resolver - –∫–æ—Ä–Ω–µ–≤–æ–π —Ä–µ–∑–æ–ª–≤–µ—Ä.
type Resolver struct {
	OSClient *opensearch.Client
}

// Query –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç QueryResolver.
func (r *Resolver) Query() generated.QueryResolver {
	return &queryResolver{r}
}

func (r *queryResolver) SearchEvents(ctx context.Context, filter *models.AuditEventFilter, limit *int, offset *int) (*models.AuditEventConnection, error) {
	filterMap := make(map[string]interface{})
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ filter *generated.AuditEventFilter –≤ filterMap
	// –ù–∞–ø—Ä–∏–º–µ—Ä:
	if filter != nil {
		if filter.Status != nil {
			filterMap["status"] = *filter.Status
		}
		if filter.EventType != nil {
			filterMap["event_type"] = *filter.EventType
		}
		if filter.ActorID != nil {
			filterMap["actor.id"] = *filter.ActorID
		}
		if filter.EntityID != nil {
			filterMap["entity.id"] = *filter.EntityID
		}
		if filter.SecurityAccessLevel != nil {
			filterMap["security.access_level"] = *filter.SecurityAccessLevel
		}
	}

	l := 20
	if limit != nil {
		l = *limit
	}
	o := 0
	if offset != nil {
		o = *offset
	}

	// –í—ã–∑—ã–≤–∞–µ–º OpenSearch –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.
	// –û–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç []*models.AuditEvent, —á—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
	// —Ç–æ–º—É, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç generated.AuditEventConnection.Events.
	events, total, err := r.OSClient.SearchEvents(ctx, filterMap, l, o)
	if err != nil {
		slog.Error("failed to search events in OpenSearch", "error", err)
		return nil, fmt.Errorf("failed to search events: %w", err)
	}

	// –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤—Ä—É—á–Ω—É—é,
	// —Ç–∞–∫ –∫–∞–∫ generated.AuditEventConnection —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç []*models.AuditEvent
	// (—Å–º. –≤–∞—à generated.go –∏ –º–∞—Ä—à–∞–ª–µ—Ä—ã —Ç–∞–º).
	return &models.AuditEventConnection{
		Events: events, // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
		Total:  int(total),
	}, nil
}

// üî• –ù–û–í–û–ï: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ SecurityResolver
type securityResolver struct{ *Resolver }

// üî• –ù–û–í–û–ï: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑–æ–ª–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—è access_level –≤ Security
// (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é gqlgen —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å–∞–º, –Ω–æ –µ—Å–ª–∏ –±—ã –Ω—É–∂–Ω–∞ –±—ã–ª–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞,
// –æ–Ω–∞ –±—ã–ª–∞ –±—ã –∑–¥–µ—Å—å. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç—Ä–µ–±—É–µ—Ç –µ–≥–æ –Ω–∞–ª–∏—á–∏—è.)
func (r *securityResolver) AccessLevel(ctx context.Context, obj *models.Security) (string, error) {
	return obj.AccessLevel, nil
}
